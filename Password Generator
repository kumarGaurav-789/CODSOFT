# ==============================================================================
# Task 3: PASSWORD GENERATOR
# This program generates strong, random passwords based on user-specified
# length and complexity (inclusion of letters, numbers, and symbols).
# ==============================================================================
import random
import string # This module provides constants for strings like all letters, digits, and punctuation.

def generate_password(length, include_letters, include_numbers, include_symbols):
    """
    Generates a random password based on specified criteria.

    Args:
        length (int): The desired length of the password.
        include_letters (bool): True if letters (upper and lower case) should be included.
        include_numbers (bool): True if numbers (0-9) should be included.
        include_symbols (bool): True if common punctuation symbols should be included.

    Returns:
        str: The generated password, or an informative error message if no character types are selected.
    """
    characters = "" # Initialize an empty string to build the pool of possible characters

    # Add characters to the pool based on user's choices
    if include_letters:
        characters += string.ascii_letters # Adds 'abc...ABC...'
    if include_numbers:
        characters += string.digits        # Adds '0123456789'
    if include_symbols:
        characters += string.punctuation   # Adds '!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'

    # Check if the user selected any character types
    if not characters:
        return "Error: Please select at least one character type (letters, numbers, or symbols)!"

    # Generate the password
    password = [] # Use a list to build the password for efficient appending
    for _ in range(length):
        password.append(random.choice(characters)) # Pick a random character from the pool

    # Shuffle the password list to ensure a random order (e.g., not always starting with a letter)
    random.shuffle(password)

    # Join the list of characters into a single string to form the final password
    return "".join(password)

def run_password_generator():
    """
    Main function to run the Password Generator application.
    It handles user input, calls the password generation logic, and displays the result.
    """
    print("\n--- PASSWORD GENERATOR ---")
    print("Create strong, random passwords for your security.")

    while True:
        try:
            # Get desired password length from the user
            length_input = input("Enter desired password length (e.g., 12): ")
            length = int(length_input) # Convert input to integer

            # Validate password length
            if length <= 0:
                print("Password length must be a positive number. Please try again.")
                continue # Go back to the beginning of the loop
        except ValueError:
            # Handle cases where the user enters non-numeric input for length
            print("Invalid input. Please enter a whole number for password length.")
            continue # Go back to the beginning of the loop

        # Get complexity preferences from the user
        include_letters_input = input("Include letters (A-Z, a-z) (y/n)? ").lower().strip()
        include_letters = (include_letters_input == 'y')

        include_numbers_input = input("Include numbers (0-9) (y/n)? ").lower().strip()
        include_numbers = (include_numbers_input == 'y')

        include_symbols_input = input("Include symbols (!@#$%) (y/n)? ").lower().strip()
        include_symbols = (include_symbols_input == 'y')

        # Generate the password using the function
        password = generate_password(length, include_letters, include_numbers, include_symbols)

        # Display the generated password or an error message
        if password.startswith("Error"): # Check if the returned value is an error message
            print(password)
        else:
            print(f"\nGenerated Password: {password}")

        # Ask if the user wants to generate another password
        play_again_input = input("\nGenerate another password? (yes/no): ").lower().strip()
        if play_again_input != 'yes':
            print("Exiting Password Generator. Goodbye!")
            break # Exit the loop if user doesn't want to continue

# This line ensures that `run_password_generator()` is called only when the script is executed directly,
# not when it's imported as a module into another script.
if __name__ == "__main__":
    run_password_generator()
