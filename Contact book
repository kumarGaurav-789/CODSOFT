# ==============================================================================
# Task 5: Contact Book Application
# This program allows users to manage contacts: add, view, search, update,
# and delete. Contacts are stored in memory for the duration of the program.
# ==============================================================================
import os # Used for clearing the screen

def clear_screen():
    """Clears the console screen for better readability."""
    os.system('cls' if os.name == 'nt' else 'clear')

def display_menu():
    """Displays the main menu options for the Contact Book."""
    print("\n--- CONTACT BOOK ---")
    print("1. Add Contact")
    print("2. View Contact List")
    print("3. Search Contact")
    print("4. Update Contact")
    print("5. Delete Contact")
    print("6. Exit")
    print("--------------------")

def add_contact(contacts):
    """
    Prompts the user for contact details and adds a new contact to the list.
    Args:
        contacts (list): The list of contact dictionaries.
    """
    print("\n--- Add New Contact ---")
    name = input("Enter contact name: ").strip()
    # Basic validation for name
    if not name:
        print("Contact name cannot be empty. Contact not added.")
        return

    phone = input("Enter phone number: ").strip()
    email = input("Enter email address (optional): ").strip()
    address = input("Enter address (optional): ").strip()

    # Create a dictionary for the new contact
    new_contact = {
        "name": name,
        "phone": phone,
        "email": email if email else "N/A",
        "address": address if address else "N/A"
    }
    contacts.append(new_contact)
    print(f"Contact '{name}' added successfully!")

def view_contact_list(contacts):
    """
    Displays a list of all saved contacts with their names and phone numbers.
    Args:
        contacts (list): The list of contact dictionaries.
    """
    if not contacts:
        print("\nYour contact book is empty!")
        return

    print("\n--- Your Contacts ---")
    for i, contact in enumerate(contacts):
        print(f"{i + 1}. Name: {contact['name']}, Phone: {contact['phone']}")
    print("---------------------")

def search_contact(contacts):
    """
    Allows users to search for contacts by name or phone number.
    Displays detailed information for matching contacts.
    Args:
        contacts (list): The list of contact dictionaries.
    """
    if not contacts:
        print("\nContact book is empty. No contacts to search.")
        return

    search_term = input("Enter name or phone number to search: ").lower().strip()
    found_contacts = []

    for contact in contacts:
        # Check if search term is in name or phone number (case-insensitive for name)
        if search_term in contact['name'].lower() or search_term in contact['phone']:
            found_contacts.append(contact)

    if not found_contacts:
        print(f"No contacts found matching '{search_term}'.")
    else:
        print(f"\n--- Search Results for '{search_term}' ---")
        for i, contact in enumerate(found_contacts):
            print(f"\nContact {i + 1}:")
            print(f"  Name: {contact['name']}")
            print(f"  Phone: {contact['phone']}")
            print(f"  Email: {contact['email']}")
            print(f"  Address: {contact['address']}")
        print("---------------------------------------")

def update_contact(contacts):
    """
    Enables users to update details of an existing contact.
    Args:
        contacts (list): The list of contact dictionaries.
    """
    view_contact_list(contacts) # Show existing contacts to help user choose
    if not contacts:
        return

    try:
        contact_num_input = input("Enter the number of the contact to update: ")
        contact_num = int(contact_num_input)

        if 1 <= contact_num <= len(contacts):
            contact_to_update = contacts[contact_num - 1]
            print(f"\nUpdating contact: {contact_to_update['name']}")
            print("Enter new details (leave blank to keep current value):")

            new_name = input(f"Current Name ({contact_to_update['name']}): ").strip()
            if new_name:
                contact_to_update['name'] = new_name

            new_phone = input(f"Current Phone ({contact_to_update['phone']}): ").strip()
            if new_phone:
                contact_to_update['phone'] = new_phone

            new_email = input(f"Current Email ({contact_to_update['email']}): ").strip()
            if new_email:
                contact_to_update['email'] = new_email

            new_address = input(f"Current Address ({contact_to_update['address']}): ").strip()
            if new_address:
                contact_to_update['address'] = new_address
            
            print(f"Contact '{contact_to_update['name']}' updated successfully!")
        else:
            print("Invalid contact number.")
    except ValueError:
        print("Invalid input. Please enter a numerical contact number.")

def delete_contact(contacts):
    """
    Provides an option to delete a contact from the list.
    Args:
        contacts (list): The list of contact dictionaries.
    """
    view_contact_list(contacts) # Show existing contacts to help user choose
    if not contacts:
        return

    try:
        contact_num_input = input("Enter the number of the contact to delete: ")
        contact_num = int(contact_num_input)

        if 1 <= contact_num <= len(contacts):
            # Confirm deletion to prevent accidental removal
            confirm = input(f"Are you sure you want to delete '{contacts[contact_num - 1]['name']}'? (yes/no): ").lower().strip()
            if confirm == 'yes':
                removed_contact = contacts.pop(contact_num - 1)
                print(f"Contact '{removed_contact['name']}' deleted successfully!")
            else:
                print("Contact deletion cancelled.")
        else:
            print("Invalid contact number.")
    except ValueError:
        print("Invalid input. Please enter a numerical contact number.")

def run_contact_book():
    """
    Main function to run the Contact Book application.
    It manages the application loop and handles user choices.
    """
    contacts = [] # Initialize an empty list to store contact dictionaries
    while True:
        clear_screen() # Clear the screen for a clean menu display
        display_menu()
        choice = input("Enter your choice (1-6): ").strip()

        if choice == '1':
            add_contact(contacts)
        elif choice == '2':
            view_contact_list(contacts)
        elif choice == '3':
            search_contact(contacts)
        elif choice == '4':
            update_contact(contacts)
        elif choice == '5':
            delete_contact(contacts)
        elif choice == '6':
            print("Exiting Contact Book. Goodbye!")
            break # Exit the while loop to terminate the program
        else:
            print("Invalid choice. Please enter a number between 1 and 6.")
        
        # Pause to allow the user to read output before the screen clears for the next menu
        input("\nPress Enter to continue...") 

# This line ensures that `run_contact_book()` is called only when the script is executed directly.
if __name__ == "__main__":
    run_contact_book()
