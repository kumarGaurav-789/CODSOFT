import secrets
import string

def generate_password(length=12, include_uppercase=True, include_lowercase=True,
                      include_digits=True, include_symbols=True):
    characters = ""
    required_chars = []

    if include_uppercase:
        characters += string.ascii_uppercase
        required_chars.append(secrets.choice(string.ascii_uppercase))
    if include_lowercase:
        characters += string.ascii_lowercase
        required_chars.append(secrets.choice(string.ascii_lowercase))
    if include_digits:
        characters += string.digits
        required_chars.append(secrets.choice(string.digits))
    if include_symbols:
        characters += string.punctuation
        required_chars.append(secrets.choice(string.punctuation))

    if not characters:
        return "Error: Please select at least one character type for the password."

    # Fill the rest of the password length
    remaining_length = length - len(required_chars)
    if remaining_length < 0:
        return "Error: Password length too short for the selected options."

    password = required_chars + [secrets.choice(characters) for _ in range(remaining_length)]
    secrets.SystemRandom().shuffle(password)
    return ''.join(password)

def get_user_choice(prompt, default=True):
    while True:
        choice = input(prompt).strip().lower()
        if not choice:
            return default
        if choice in ['y', 'yes']:
            return True
        if choice in ['n', 'no']:
            return False
        print("Invalid input. Please enter 'y' or 'n'.")

def run_password_generator():
    print("--- Secure Password Generator ---")

    while True:
        try:
            length_input = input("Enter desired password length (default 12): ").strip()
            length = int(length_input) if length_input else 12
            if length <= 0:
                print("Password length must be a positive number.")
                continue
            break
        except ValueError:
            print("Invalid input. Please enter a valid number.")

    inc_upper = get_user_choice("Include uppercase letters? (y/n, default y): ", default=True)
    inc_lower = get_user_choice("Include lowercase letters? (y/n, default y): ", default=True)
    inc_digits = get_user_choice("Include digits? (y/n, default y): ", default=True)
    inc_symbols = get_user_choice("Include symbols? (y/n, default y): ", default=True)

    password = generate_password(length, inc_upper, inc_lower, inc_digits, inc_symbols)

    if "Error" in password:
        print(password)
    else:
        print(f"\nGenerated Password: {password}")
        print(f"Password Length: {len(password)}")

if __name__ == "__main__":
    run_password_generator()
